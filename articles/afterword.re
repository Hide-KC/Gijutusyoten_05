={afterword} あとがき
本書をお読みいただきありがとうございます。
技術書典５にてはじめてのサークル参加、はじめての本出版です。

もともと即売会系イベントには２年ほど前から一般参加していましが、
一度は頒布する側に回ってみたいなーというぼんやりとした思いがありました。
そんな中で、一般参加した技術書典４で偶然手に取った
「技術書をかこう！ ～はじめてのRe:VIEW～」（TechBoosterさん発行）
が、本書執筆のきっかけでした。

執筆環境の整え方からRe:VIEWのチートシート、
技術書のテンプレをGitHubから引用できると書いてあったので、
「これなら自分ですら本書けそうやん…！」と軽率に思い、
気がついたら技術書典５に申し込んでいました。
技術書を書こう！とテンプレートが無ければ本書を執筆することは到底かないませんでした。
この場を借りて深く感謝申し上げます。
@<br>{}

執筆ネタは最近KotlinでAndroidアプリを作っていたのと、
Twitterの認証がイマイチわからないなーというツイートを
見かけたことから、KotlinとTwitterネタに決めました。

中でもCoroutinesはKotlin Fest 2018のスライドを見てから勉強して
実装という突貫工事でしたが、Coroutines自体の実装がものすごく簡単だったので
「実装だけなら執筆ネタにしても間に合うんじゃね？？」
という浅はかな計算から本書への導入に至りました。
Coroutines早くExperimental外れるがよいぞ。
@<br>{}

@<chap>{create_color_picker}ではObserverパターンをGoF本に沿ってごりごり実装しましたが、
これはたぶんLiveDataを使えばもっと簡単に実装できると思います。
LiveDataはObserverパターンを適用しており、TechBoosterさんの新刊で詳しく説明されているので、
むしろベタなObserverパターンで本書いたほうが@<del>{ページ数も稼げるし}おもしろいんじゃないか？
と思って書いてみました。

一応別の実装パターンも考えてみました。

 * pull型（updateに引数なし）にしてSubjectにHSBを持たせる
 ** Subjectの参照をどう取得するか -> Mediatorパターンになりそうだったので×
 * SubjectをActivityに持たせてActivityでnotify叩けば？
 ** Fragmentが破棄されてもViewへの参照が残る危険があるので×
 * LiveData使えば？
 ** それな。

これからはLiveData使いましょうね。
@<br>{}

本書とは全然関係ないですが、サークル名はEGO-WRAPPIN'の歌詞の一節を引用しただけです、が、
なんかその、厨二的な、社畜の心をえぐりそうな感じになりましたね……。
次回があればサークル名変えるかもです。

今後もっと深くニッチなネタを書けるよう日々努力していきたいと思います。
最後に、ここまで読んでいただきまして本当にありがとうございました。